import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from ipywidgets import interact


data = pd.read_csv('data.csv')

data.head()

data.isnull().sum()

data['label'].value_counts()

print("Average ratio of Nitrogen in the soil : {0:2f}".format(data['N'].mean()))
print("Average ratio of Phosphorous in the soil : {0:2f}".format(data['P'].mean()))
print("Average ratio of Potassium in the soil : {0:2f}".format(data['K'].mean()))
print("Average Temperature in celsius : {0:2f}".format(data['temperature'].mean()))
print("Average Relative Humidity in % : {0:2f}".format(data['humidity'].mean()))
print("Average PH Value of the Soil : {0:2f}".format(data['ph'].mean()))
print("Average Rainfall in mm : {0:2f}".format(data['rainfall'].mean()))


@interact
def summary(crops = list(data['label'].value_counts().index)):
    x = data[data['label'] == crops]
    print("-----------------------------------------------")
    print("statistics for Nitrogen")
    print("Minimum Nitrogen required :", x['N'].min())
    print("Average Nitrogen required :", x['N'].mean())
    print("Maximum Nitrogen required :", x['N'].max())
    print("--------------------------------------------------")
    print("-----------------------------------------------")
    print("statistics for Phosphorous")
    print("Minimum Phosphorous required :", x['P'].min())
    print("Average Phosphorous required :", x['P'].mean())
    print("Maximum Phosphorous required :", x['P'].max())
    print("--------------------------------------------------")
    print("-----------------------------------------------")
    
    print("statistics for Potassium")
    print("Minimum Potassium required :", x['K'].min())
    print("Average Potassium required :", x['K'].mean())
    print("Maximum Potassium required :", x['K'].max())
    print("--------------------------------------------------")
    print("-----------------------------------------------")
    print("statistics for Temperature")
    print("Minimum Temperature required :", x['temperature'].min())
    print("Average Temperature required :", x['temperature'].mean())
    print("Maximum Temperature required :", x['temperature'].max())
    print("--------------------------------------------------")
    print("-----------------------------------------------")
    print("statistics for Rainfall")
    print("Minimum Rainfall required :", x['rainfall'].min())
    print("Average Rainfall required :", x['rainfall'].mean())
    print("Maximum Rainfall required :", x['rainfall'].max())
    print("--------------------------------------------------")

    

@interact
def compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):
    print("Crops which require greater than avrage ", conditions,'\n')
    print(data[data[conditions] > data[conditions].mean()]['label'].unique())
    print("----------------------------------------------")
    print("Crops which require less than avrage ", conditions,'\n')
    print(data[data[conditions] > data[conditions].mean()]['label'].unique())



plt.subplot(2, 4, 2)
sns.distplot(data['K'], color = 'darkblue')
plt.xlabel("Ratio of potassium" , fontsize = 12)
plt.grid()

plt.subplot(2, 4, 3)
sns.distplot(data['N'], color = 'darkgreen')
plt.xlabel("Nitrogen" , fontsize = 12)
plt.grid()

plt.subplot(2, 4, 4)
sns.distplot(data['P'], color = 'pink')
plt.xlabel("phosphorous" , fontsize = 12)
plt.grid()

plt.subplot(2, 4, 5)
sns.distplot(data['K'], color = 'yellow')
plt.xlabel("temperature" , fontsize = 12)
plt.grid()

plt.subplot(2, 4, 6)
sns.distplot(data['humidity'], color = 'black')
plt.xlabel("humidity" , fontsize = 12)
plt.grid()

plt.subplot(2, 4, 7)
sns.distplot(data['ph'], color = 'lightgreen')
plt.xlabel("ph" , fontsize = 12)
plt.grid()

plt.suptitle('Distribution of Agricultural condition', fontsize = 20)
plt.show



print("Some Interesting Patterns")
print("----------------------------------")
print("crops which require very high ratio of nitrogen content in soil:", data[data['N'] > 120]['label'].unique())
print("crops which require very high ratio of phosphorous content in soil:", data[data['N'] > 120]['label'].unique())
print("crops which require very high ratio of potassium content in soil:", data[data['N'] > 120]['label'].unique())
print("crops which require very high Rainfall :", data[data['N'] > 120]['label'].unique())
print("crops which require very low temperature:", data[data['N'] > 120]['label'].unique())
print("crops which require very high temperature:", data[data['N'] > 120]['label'].unique())
print("crops which require very low PH:", data[data['N'] > 120]['label'].unique())
print("crops which require very High PHf:", data[data['N'] > 120]['label'].unique())




print("summer crops")
print(data[(data['temperature'] > 10) & (data['humidity'] > 50)]['label'].unique())
print("-------------------")
print("Winter crops")
print(data[(data['temperature'] > 20) & (data['humidity'] > 30)]['label'].unique())
print("-------------------")
print("Rainy crops")
print(data[(data['rainfall'] > 200) & (data['humidity'] > 30)]['label'].unique())
print("-------------------")


from sklearn.cluster import KMeans

x = data.drop(['label'], axis=1)

x = x.values

print(x.shape)



#Lets determine the Optimum number of Clusters Within the Dataset
plt.rcParams['figure.figsize'] = (10, 4)

wcss = []
for i in range(1,11):
    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
    km.fit(x)
    wcss.append(km.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method', fontsize = 20)
plt.xlabel('No. of clusters')
plt.ylabel('wcss')
plt.show()



#Lets implement the K Means algorithm to perform clustering analysis
km = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
y_means = km.fit_predict(x)


#Lets find out the Results
a = data['label']
y_means = pd.DataFrame(y_means)
z = pd.concat([y_means, a], axis = 1)
z = z.rename(columns = {0: 'cluster'})


#Lets check the Clusters of each Crops
print("Lets check the Results after Applying the K Means Clustering Analysis \n")
print("Crops in First Cluster:" , z[z['cluster'] == 0]['label'].unique())
print("------------------------------------------------------------")
print("Crops in Second Cluster:", z[z['cluster'] == 1]['label'].unique())
print("------------------------------------------------------------")
print("Crops in Third Cluster:", z[z['cluster'] == 2]['label'].unique())
print("------------------------------------------------------------")
print("Crops in Fourth Cluster:", z[z['cluster'] == 3]['label'].unique())
print("------------------------------------------------------------")




#Lets split the Dataset for predictive modelling

y = data['label']
x = data.drop(['label'], axis = 1)

print("shape of x:", x.shape)
print("Shape of y:", y.shape)



# Lets create Training and Testing Sets for Validation of Results

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

print("The Shape of x train:", x_train.shape)
print("The Shape of x test:", x_test.shape)
print("The Shape of y train:", y_train.shape)
print("The Shape of y test:", y_test.shape)


# Lets create a Predictive Model

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)



#Lets evolute the Model Performance
from sklearn.metrics import confusion_matrix

#Lets print the Confusion matrix first
plt.rcParams['figure.figsize'] = (10, 10)
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot = True, cmap = 'Wistia')
plt.title('confusion Matrix for Logistic Regression', fontsize = 15)
plt.show


#Lets check the head of the data
data.head()


prediction = model.predict((np.array([[90,
                                      40,
                                      40,
                                      20,
                                      80,
                                      7,
                                      200]])))
print("The Suggested Crop for Given Climatic Condition is :", prediction)